#
# INPUTs:
#   IN: full path to source
#  OUT: full path to .cmake output
#

if(NOT IN)
    message(FATAL_ERROR "Huh?")
endif()

if(NOT OUT)
    message(FATAL_ERROR "Huh?")
endif()

set(trueout "${OUT}")
set(OUT "${OUT}.temp")


file(STRINGS ${IN} source REGEX wasm_rt_register_func_type)

# always generate [] => [] because I didn't wanted to write an extra REGEX...
set(typenames "v_v") 
set(typecount 1)
set(TYPE_v_v_IDX 0)
set(TYPE_v_v_INCOUNT 0)
set(TYPE_v_v_OUTCOUNT 0)

function(typesym out type)
    if("${type}" STREQUAL "WASM_RT_I32")
        set(r i)
    elseif("${type}" STREQUAL "WASM_RT_I64")
        set(r l)
    elseif("${type}" STREQUAL "WASM_RT_F32")
        set(r f)
    elseif("${type}" STREQUAL "WASM_RT_F64")
        set(r d)
    endif()
    set(${out} ${r} PARENT_SCOPE)
endfunction()

function(typesym2 out type)
    if("${type}" STREQUAL "WASM_RT_I32")
        set(r u32)
    elseif("${type}" STREQUAL "WASM_RT_I64")
        set(r u64)
    elseif("${type}" STREQUAL "WASM_RT_F32")
        set(r f32)
    elseif("${type}" STREQUAL "WASM_RT_F64")
        set(r f64)
    endif()
    set(${out} ${r} PARENT_SCOPE)
endfunction()

foreach(l ${source})
    if("${l}" MATCHES "wasm_rt_register_func_type.([0-9]+), ([0-9]+), ([^)]+)")
        set(incount ${CMAKE_MATCH_1})
        set(outcount ${CMAKE_MATCH_2})
        set(args "${CMAKE_MATCH_3}")
        string(REGEX MATCHALL "WASM_RT_(...)" total "${args}")
        # convert to type string
        set(totalstr "")
        foreach(t ${total})
            typesym(nam ${t})
            set(totalstr "${totalstr}${nam}")
        endforeach()
        # Split in-out
        string(SUBSTRING "${totalstr}" 0 ${incount} instr)
        string(SUBSTRING "${totalstr}" ${incount} ${outcount} outstr)
        if(NOT instr)
            set(instr v)
        endif()
        if(NOT outstr)
            set(outstr v)
        endif()
        set(typename "${instr}_${outstr}")
        if(${typename}_have)
            message(STATUS "Dupe: ${typename}")
        else()
            set(${typename}_have 1)
            list(APPEND typenames "${typename}")
            set(TYPE_${typename}_INCOUNT ${incount})
            set(TYPE_${typename}_OUTCOUNT ${outcount})
            set(queue ${total})
            set(intypes)
            set(outtypes)
            set(cnt 0)
            while(NOT ${cnt} EQUAL ${incount})
                list(GET queue 0 cur)
                list(REMOVE_AT queue 0)
                typesym2(curtype ${cur})
                list(APPEND intypes ${curtype})
                math(EXPR cnt "${cnt}+1")
            endwhile()
            set(cnt 0)
            while(NOT ${cnt} EQUAL ${outcount})
                list(GET queue 0 cur)
                list(REMOVE_AT queue 0)
                typesym2(curtype ${cur})
                list(APPEND outtypes ${curtype})
                math(EXPR cnt "${cnt}+1")
            endwhile()

            set(TYPE_${typename}_INTYPES ${intypes})
            set(TYPE_${typename}_OUTTYPES ${outtypes})

            if(NOT TYPE_${typename}_IDX)
                set(TYPE_${typename}_IDX ${typecount})
                math(EXPR typecount "${typecount}+1")
            endif()
        endif()
    endif()
endforeach()

file(WRITE ${OUT} "# Autogenerated \n\n")

file(APPEND ${OUT} "set(typenames ${typenames})\n")
file(APPEND ${OUT} "set(typetotal_count ${typecount})\n\n")

foreach(t ${typenames})
    file(APPEND ${OUT} "set(type_${t}_intypes ${TYPE_${t}_INTYPES})\n")
    file(APPEND ${OUT} "set(type_${t}_outtypes ${TYPE_${t}_OUTTYPES})\n")
    file(APPEND ${OUT} "set(type_${t}_idx ${TYPE_${t}_IDX})\n")
    file(APPEND ${OUT} "set(type_${t}_incount ${TYPE_${t}_INCOUNT})\n")
    file(APPEND ${OUT} "set(type_${t}_outcount ${TYPE_${t}_OUTCOUNT})\n\n")
endforeach()

file(RENAME ${OUT} ${trueout})
