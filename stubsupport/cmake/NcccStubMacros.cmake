if(__NCCC_STUB_MACROS)
    return()
endif()

set(__NCCC_STUB_MACROS 1)

set(__NCCC_STUB_NAMES)

macro(nccc_stub_begin nam)
    list(APPEND __NCCC_STUB_LIBNAMES ${nam})
    set(__NCCC_STUB_CURRENT_LIBNAME "${nam}")
endmacro()

function(nccc_stub_end nam)
    if(NOT ${nam} STREQUAL ${__NCCC_STUB_CURRENT_LIBNAME})
        message(FATAL_ERROR "Unmatched libname: ${nam} (current: ${__NCCC_STUB_CURRENT_LIBNAME})")
    endif()
    nccc_stub_generate(${nam})
endfunction()
    
macro(nccc_api nam)
    cmake_parse_arguments(__NCCC_STUB
        "" "" "IN;OUT" ${ARGN})
    list(APPEND __NCCC_STUB_APIS_${__NCCC_STUB_CURRENT_LIBNAME}
        ${nam})
    set(__NCCC_STUB_APIDATA_IN_${__NCCC_STUB_CURRENT_LIBNAME}_${nam} 
        ${__NCCC_STUB_IN})
    set(__NCCC_STUB_APIDATA_OUT_${__NCCC_STUB_CURRENT_LIBNAME}_${nam} 
        ${__NCCC_STUB_OUT})
endmacro()

function(nccc_stub_generate nam)
    set(apis ${__NCCC_STUB_APIS_${nam}})

    # Generate metadata
    set(idx 0)
    foreach(e ${apis})
        set(api_${nam}_${e}_idx ${idx})
        set(api_${nam}_${e}_in ${__NCCC_STUB_APIDATA_IN_${nam}_${e}})
        set(api_${nam}_${e}_out ${__NCCC_STUB_APIDATA_OUT_${nam}_${e}})

        list(LENGTH api_${nam}_${e}_in api_${nam}_${e}_inlen)
        list(LENGTH api_${nam}_${e}_out api_${nam}_${e}_outlen)

        math(EXPR idx "${idx}+1")
    endforeach()

    # Generate header output
    set(acc "/* Autogenerated */\n")

    ## FORWARD_x_STUB_COUNT
    string(CONCAT acc "${acc}"
        "#define FORWARD_0_STUB_COUNT ${idx}\n")

    ## FORWARD_x_STUB_EXPAND
    string(CONCAT acc "${acc}"
        "#define FORWARD_0_STUB_EXPAND(x) \\\n")
    foreach(e ${apis})
        if(api_${nam}_${e}_inlen EQUAL 0)
            set(ind void)
        else()
            set(ind arg)
        endif()
        if(api_${nam}_${e}_outlen EQUAL 0)
            set(outd void)
        else()
            set(outd ret)
        endif()
        string(CONCAT acc "${acc}" 
            "    x(${ind},${outd},${e}) \\\n")
    endforeach()
    string(CONCAT acc "${acc}" "\n")

    ## symbol data
    foreach(e ${apis})
        set(name ${e})
        set(idx ${api_${nam}_${e}_idx})
        set(arg ${api_${nam}_${e}_in})
        set(ret ${api_${nam}_${e}_out})
        set(arglen ${api_${nam}_${e}_inlen})
        set(retlen ${api_${nam}_${e}_outlen})

        string(CONCAT acc "${acc}"
            "#define SYM_${e}_NAME ${name} \n")
        string(CONCAT acc "${acc}"
            "#define SYM_${e}_IDX ${idx} \n")
        string(CONCAT acc "${acc}"
            "#define SYM_${e}_STUB_TYPE forward_0 \n")
        string(CONCAT acc "${acc}"
            "#define SYM_${e}_ARG_COUNT ${arglen} \n")
        string(CONCAT acc "${acc}"
            "#define SYM_${e}_RET_COUNT ${retlen} \n")
        string(CONCAT acc "${acc}"
            "#define SYM_${e}_ARG_EXPAND(x) \\\n")
        set(idx 0)
        foreach(x ${arg})
            set(cur ${idx})
            math(EXPR idx "${idx}+1")
            if(${idx} EQUAL ${arglen})
                set(d term)
            else()
                set(d arg)
            endif()
            string(CONCAT acc "${acc}"
                "    x(${cur},${d},${x}) \\\n")
        endforeach()
        string(CONCAT acc "${acc}" "\n")
        string(CONCAT acc "${acc}"
            "#define SYM_${e}_RET_EXPAND(x) \\\n")
        set(idx 0)
        foreach(x ${ret})
            set(cur ${idx})
            math(EXPR idx "${idx}+1")
            if(${idx} EQUAL ${retlen})
                set(d term)
            else()
                set(d ret)
            endif()
            string(CONCAT acc "${acc}"
                "    x(${cur},${d},${x}) \\\n")
        endforeach()
        string(CONCAT acc "${acc}" "\n")
    endforeach()
    string(CONCAT acc "${acc}" "\n")

    ## Write results
    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/stubdata_${nam}.h
        "${acc}")
endfunction()
